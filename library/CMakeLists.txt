cmake_minimum_required(VERSION 3.05)

project(uapki LANGUAGES C)

file(MAKE_DIRECTORY build)
file(MAKE_DIRECTORY build/out)

include(CheckCCompilerFlag)

string(REGEX MATCH "Clang" CMAKE_COMPILER_IS_CLANG "${CMAKE_C_COMPILER_ID}")
string(REGEX MATCH "GNU" CMAKE_COMPILER_IS_GNU "${CMAKE_C_COMPILER_ID}")
string(REGEX MATCH "MSVC" CMAKE_COMPILER_IS_MSVC "${CMAKE_C_COMPILER_ID}")

if(CMAKE_COMPILER_IS_CLANG)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wwrite-strings -Wpointer-arith -Wimplicit-fallthrough -Wshadow -Wvla -Wformat=2 -Wno-format-nonliteral")
    set(CMAKE_C_FLAGS_RELEASE     "-O2")
    set(CMAKE_C_FLAGS_DEBUG       "-O0 -g3")
endif(CMAKE_COMPILER_IS_CLANG)

if(CMAKE_COMPILER_IS_GNU)
    # some warnings we want are not available with old GCC versions
    # note: starting with CMake 2.8 we could use CMAKE_C_COMPILER_VERSION
    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion
                    OUTPUT_VARIABLE GCC_VERSION)
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -Wextra -Wwrite-strings")
    if (GCC_VERSION VERSION_GREATER 3.0 OR GCC_VERSION VERSION_EQUAL 3.0)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wformat=2 -Wno-format-nonliteral")
    endif()
    if (GCC_VERSION VERSION_GREATER 4.3 OR GCC_VERSION VERSION_EQUAL 4.3)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wvla")
    endif()
    if (GCC_VERSION VERSION_GREATER 4.5 OR GCC_VERSION VERSION_EQUAL 4.5)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wlogical-op")
    endif()
    if (GCC_VERSION VERSION_GREATER 4.8 OR GCC_VERSION VERSION_EQUAL 4.8)
        set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wshadow")
    endif()
    if (GCC_VERSION VERSION_GREATER 5.0)
        CHECK_C_COMPILER_FLAG("-Wformat-signedness" C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS)
        if(C_COMPILER_SUPPORTS_WFORMAT_SIGNEDNESS)
            set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wformat-signedness")
        endif()
    endif()
    if (GCC_VERSION VERSION_GREATER 7.0 OR GCC_VERSION VERSION_EQUAL 7.0)
      set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wformat-overflow=2 -Wformat-truncation")
    endif()
    set(CMAKE_C_FLAGS_RELEASE     "-O2")
    set(CMAKE_C_FLAGS_DEBUG       "-O0 -g3")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -C")
endif(CMAKE_COMPILER_IS_GNU)

if(CMAKE_COMPILER_IS_MSVC)
    # Strictest warnings
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} /W3")
    message(STATUS "is CMAKE_COMPILER_IS_MSVC")
    # Reproducible/deterministic-build, only clang-cl
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} /brepro")
endif(CMAKE_COMPILER_IS_MSVC)

set(CMAKE_C_VISIBILITY_PRESET hidden)
set(CMAKE_CXX_VISIBILITY_PRESET hidden)

message(STATUS "CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
message(STATUS "CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
message(STATUS "UAPKI_CMAKE_ARCH: ${UAPKI_CMAKE_ARCH}")
message(STATUS "UAPKI_CMAKE_CROSS: ${UAPKI_CMAKE_CROSS}")

set(OUT_DIR "out/")
if(${CMAKE_SYSTEM_NAME} MATCHES "Windows")
    message(STATUS "is win32")
    string(APPEND OUT_DIR "win32")
endif()
if(${CMAKE_SYSTEM_NAME} MATCHES "Linux")
    message(STATUS "is linux")
    string(APPEND OUT_DIR "linux")
    if(DEFINED UAPKI_CMAKE_ARCH)
        string(APPEND OUT_DIR "-${UAPKI_CMAKE_ARCH}")
    endif()
    if(DEFINED UAPKI_CMAKE_CROSS)
        string(APPEND OUT_DIR "-cross")
    endif()
    if(CMAKE_COMPILER_IS_CLANG)
        string(APPEND OUT_DIR "-clang")
    elseif(CMAKE_COMPILER_IS_GNU)
        string(APPEND OUT_DIR "-gnu")
    endif()
endif()
if(${CMAKE_SYSTEM_NAME} MATCHES "FreeBSD")
    message(STATUS "is freebsd")
    string(APPEND OUT_DIR "freebsd")
    if(DEFINED UAPKI_CMAKE_ARCH)
        string(APPEND OUT_DIR "-${UAPKI_CMAKE_ARCH}")
    endif()
    if(DEFINED UAPKI_CMAKE_CROSS)
        string(APPEND OUT_DIR "-cross")
    endif()
    if(CMAKE_COMPILER_IS_CLANG)
        string(APPEND OUT_DIR "-clang")
    elseif(CMAKE_COMPILER_IS_GNU)
        string(APPEND OUT_DIR "-gnu")
    endif()
endif()
if(${CMAKE_SYSTEM_NAME} MATCHES "Darwin")
    message(STATUS "is macos")
    string(APPEND OUT_DIR "macos")
    if(DEFINED CMAKE_OSX_ARCHITECTURES)
        if(CMAKE_OSX_ARCHITECTURES STREQUAL "arm64")
            string(APPEND OUT_DIR "-arm64")
        elseif(CMAKE_OSX_ARCHITECTURES STREQUAL "x86_64")
            string(APPEND OUT_DIR "-x64")
        endif()
    endif()
endif()
if(${CMAKE_SYSTEM_NAME} MATCHES "Android")
    message(STATUS "is Android")
    string(APPEND OUT_DIR "android")
endif()

message(STATUS "OUT_DIR:" ${OUT_DIR})
file(MAKE_DIRECTORY ${OUT_DIR})

add_subdirectory (uapkic)
add_subdirectory (uapkif)
add_subdirectory (uapki)
if(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/cm-pkcs12)
  add_subdirectory (cm-pkcs12)
endif()
if(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/hostapp)
  add_subdirectory (hostapp)
endif()
if(IS_DIRECTORY ${PROJECT_SOURCE_DIR}/test)
  add_subdirectory (test)
endif()
